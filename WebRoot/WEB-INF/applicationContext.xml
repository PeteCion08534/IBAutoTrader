<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
      http://www.springframework.org/schema/aop
      http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
      http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
      http://www.springframework.org/schema/context 
      http://www.springframework.org/schema/context/spring-context-2.5.xsd
      http://www.springframework.org/schema/jee
      http://www.springframework.org/schema/jee/spring-jee-2.5.xsd
      http://www.springframework.org/schema/tx 
      http://www.springframework.org/schema/tx/spring-tx-3.0.xsd   
      http://www.springframework.org/schema/task 
      http://www.springframework.org/schema/task/spring-task.xsd">
    
    
    
        <!--
		This declaration will cause Spring to locate every @Component,
		@Repository and @Service in your application. In practical terms this
		allows you to write a POJO and then simply annotate the new POJO as an
		@Service and Spring will automatically detect, instantiate and
		dependency inject your service at startup time. Importantly, you can
		then also have your new service injected into any other class that
		requires it simply by declaring a field for your service inside the
		relying class and Spring will inject it. Note that two exclude filters
		are declared. The first ensures that Spring doesn't spend time
		introspecting Roo-specific ITD aspects. The second ensures Roo doesn't
		instantiate your @Controller classes, as these should be instantiated
		by a web tier application context. Refer to web.xml for more details
		about the web tier application context setup services.
		
		Furthermore, this turns on @Autowired, @PostConstruct etc support. These 
		annotations allow you to use common Spring and Java Enterprise Edition 
		annotations in your classes without needing to do any special configuration. 
		The most commonly used annotation is @Autowired, which instructs Spring to
		dependency inject an object into your class.
	-->
    <context:component-scan base-package="com.theta.process">
        <context:exclude-filter expression=".*_Roo_.*" type="regex"/>
        <context:exclude-filter expression="org.springframework.stereotype.Controller" type="annotation"/>
    </context:component-scan>
        
    <!-- Added schema ref above, need this tag to run scheduler -->
    <task:annotation-driven /> 
      
	<!-- ******************************************************************** -->
	<!-- Include context files from different layers -->
	<!-- ******************************************************************** -->
	<import resource="classpath:theta11-generated-security-context.xml" />
	<import resource="classpath:theta11-security-context.xml" />
	<import resource="classpath:theta11-generated-service-context.xml" />
	<import resource="classpath:theta11-generated-dao-context.xml" />
	<import resource="classpath:theta11-dao-context.xml" />
	<import resource="classpath:theta11-service-context.xml" />
	
	
	<!-- Inject e-mail sender with necessary properties -->
	<!--  
	<bean class="org.springframework.mail.javamail.JavaMailSenderImpl" id="mailSender">
	  <property name="host"><value>smtp.yahoo.com</value></property>
		COMMENT:   email.host example: trademail.bdpinternational.com 
    	<property name="javaMailProperties">
    		<props>
        		<prop key="mail.smtp.starttls.enable">true</prop>
    		</props>
    	</property>        
    </bean>
	-->
	
</beans>